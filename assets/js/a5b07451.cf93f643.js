"use strict";(self.webpackChunkpidginmq_website=self.webpackChunkpidginmq_website||[]).push([[7748],{6472:(e,i,s)=>{s.r(i),s.d(i,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var t=s(4848),n=s(8453);const r={sidebar_position:2},o="Retry",a={id:"jobs/retry",title:"Retry",description:"During job processing, some of jobs will fail. In PidginMQ job is considered failed in this cases:",source:"@site/docs/jobs/retry.md",sourceDirName:"jobs",slug:"/jobs/retry",permalink:"/docs/jobs/retry",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/jobs/retry.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"States",permalink:"/docs/jobs/states"},next:{title:"Repetable Job",permalink:"/docs/jobs/cron"}},d={},c=[{value:"Retrying Failed Jobs",id:"retrying-failed-jobs",level:2},{value:"Example",id:"example",level:2}];function l(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,n.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"retry",children:"Retry"})}),"\n",(0,t.jsx)(i.p,{children:"During job processing, some of jobs will fail. In PidginMQ job is considered failed in this cases:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:["job is snoozed by throwing ",(0,t.jsx)(i.code,{children:"SnoozeJobException"})]}),"\n",(0,t.jsx)(i.li,{children:"job throws any kind of error"}),"\n",(0,t.jsx)(i.li,{children:"job is stucked"}),"\n"]}),"\n",(0,t.jsx)(i.h2,{id:"retrying-failed-jobs",children:"Retrying Failed Jobs"}),"\n",(0,t.jsx)(i.p,{children:"When a job throws an exception, the worker catches it, increments the job's attempts count, and reschedules the job if the maximum number of attempts has not been reached."}),"\n",(0,t.jsxs)(i.p,{children:["In order to decide when next time the job needs to be run, PidginMQ will use configured ",(0,t.jsx)(i.a,{href:"/docs/backoff",children:"backoff strategy"}),". PidginMQ allows you to use built-in strategies or define custom ones for job retries. The default backoff strategy is a fixed strategy, where the job will be retried after 5 seconds."]}),"\n",(0,t.jsxs)(i.p,{children:["Retry policy is specified on client ",(0,t.jsx)(i.a,{href:"/docs/configuration",children:"configuration"}),"."]}),"\n",(0,t.jsx)(i.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(i.p,{children:"The maximum number of retries is specified when the job is created. Once the job is created, the maximum number of attempts cannot be changed."}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-js",children:'const insertedJob = await client.addJob({\n  kind: "welcome_mail",\n  maxAttempts: 25,\n  queue: "email",\n});\n'})})]})}function h(e={}){const{wrapper:i}={...(0,n.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);