"use strict";(self.webpackChunkpidginmq_website=self.webpackChunkpidginmq_website||[]).push([[70],{7177:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>c,contentTitle:()=>r,default:()=>l,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var i=n(4848),u=n(8453);const t={sidebar_position:7},r="Queues",a={id:"queues",title:"Queues",description:"PidginMQ can be configured to work with multiple queues, all of which are stored in a single database table. However, only the jobs from the queues that PidginMQ is specifically configured to process will be executed.",source:"@site/docs/queues.md",sourceDirName:".",slug:"/queues",permalink:"/docs/queues",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/queues.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Architecture",permalink:"/docs/advance/architecture"},next:{title:"Backoff Strategy",permalink:"/docs/backoff"}},c={},o=[{value:"Pause Queue",id:"pause-queue",level:2},{value:"Resume Queue",id:"resume-queue",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,u.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.header,{children:(0,i.jsx)(s.h1,{id:"queues",children:"Queues"})}),"\n",(0,i.jsx)(s.p,{children:"PidginMQ can be configured to work with multiple queues, all of which are stored in a single database table. However, only the jobs from the queues that PidginMQ is specifically configured to process will be executed."}),"\n",(0,i.jsxs)(s.p,{children:["A queue can be configured either during the creation of the PidginMQ client or later using the client's ",(0,i.jsx)(s.code,{children:"addQueue"})," method."]}),"\n",(0,i.jsx)(s.p,{children:"Example with constructor:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:"const queues = new Map<string, QueueConfig>();\nqueues.set('email', { maxWorkers: 1 });\nconst options = {\n    workers: new Workers(),\n    queues,\n    dbConfig: {\n    host: 'localhost',\n    port: 5432,\n    user: 'pidginmq',\n    password: 'Password1',\n    database: 'pidginmq',\n    ssl: false,\n    },\n};\nclient = new Client(options);\nawait client.start();\n\n"})}),"\n",(0,i.jsxs)(s.p,{children:["Example with adding queue through ",(0,i.jsx)(s.code,{children:"addQueue"})," method:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:'client.addQueue("email", { maxWorkers: 1 });\n'})}),"\n",(0,i.jsx)(s.h2,{id:"pause-queue",children:"Pause Queue"}),"\n",(0,i.jsx)(s.p,{children:"PidginMQ can pause processing jobs for specific queue without stopping a client."}),"\n",(0,i.jsxs)(s.p,{children:["Method for pausing queue processing is ",(0,i.jsx)(s.code,{children:"pauseQueue"}),":"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:'const pasuedQueue = await client.pauseQueue("emial");\n'})}),"\n",(0,i.jsx)(s.h2,{id:"resume-queue",children:"Resume Queue"}),"\n",(0,i.jsxs)(s.p,{children:["When queue is paused, processing can be restored by calling ",(0,i.jsx)(s.code,{children:"resumeQueue"})," method:"]}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-js",children:'const resumedQueue = await client.resumeQueue("email");\n'})})]})}function l(e={}){const{wrapper:s}={...(0,u.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);