"use strict";(self.webpackChunkpidginmq_website=self.webpackChunkpidginmq_website||[]).push([[7349],{5424:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=s(4848),i=s(8453);const o={sidebar_position:9},r="Events",a={id:"events",title:"Events",description:"Every time a job changes state during processing, it triggers an event that users can listen to via the subscribe method. To use the subscribe method, users need to provide three callback functions: one for handling events, one for handling error notifications, and one for handling the event when the client has finished processing events.",source:"@site/docs/events.md",sourceDirName:".",slug:"/events",permalink:"/docs/events",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/events.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Backoff Strategy",permalink:"/docs/backoff"}},c={},d=[{value:"Stats",id:"stats",level:2},{value:"Example",id:"example",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"events",children:"Events"})}),"\n",(0,t.jsx)(n.p,{children:"Every time a job changes state during processing, it triggers an event that users can listen to via the subscribe method. To use the subscribe method, users need to provide three callback functions: one for handling events, one for handling error notifications, and one for handling the event when the client has finished processing events."}),"\n",(0,t.jsxs)(n.p,{children:["The events are of type ",(0,t.jsx)(n.code,{children:"Event"})," and contains:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"job"})," - the event includes information about the job for which it was triggered"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"kind"})," - type of event(",(0,t.jsx)(n.code,{children:"JobCompleted"}),", ",(0,t.jsx)(n.code,{children:"JobCancelled"}),", ",(0,t.jsx)(n.code,{children:"JobSnoozed"}),", ",(0,t.jsx)(n.code,{children:"JobFailed"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"stats"})," - the event also includes information about the time it took to process the job"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"stats",children:"Stats"}),"\n",(0,t.jsx)(n.p,{children:"Stats contains three fields:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"queueWaitDuration"})," - provides details on how long the job was waiting in the queue before processing began."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"runDuration"})," - provides details on how much time the job spent in processing"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"completeDuration"})," - complete time for job processing(",(0,t.jsx)(n.code,{children:"queueWaitDuration + runDuration"}),")"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"client.subscribe({\n  onNext: (event) => {\n    console.log(`Job: ${event.job.id}, type of event: ${event.kind}, stats: ${event.stats}`);\n  },\n  onError: (error) => console.error(error)\n  onCompleted: ()=> console.log('Job processing has finished');\n});\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}}}]);